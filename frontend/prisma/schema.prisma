generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  wallet        String?        @unique
  email         String?        @unique
  name          String?
  image         String?
  provider      String?        // "google", "github", "cardano", etc.
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  roleId        String
  isBanned      Boolean        @default(false)
  bannedUntil   DateTime?
  comments      Comment[]      @relation("UserComments")
  media         Media[]        @relation("UserMedia")
  posts         Post[]         @relation("UserPosts")
  reactions     Reaction[]
  notifications Notification[] @relation("UserNotifications")
  role          Role           @relation(fields: [roleId], references: [id])

  @@index([createdAt])
  @@index([provider])
  @@index([isBanned])
}

model Role {
  id          String   @id @default(uuid())
  name        RoleName @unique
  description String?
  users       User[]
}

model Post {
  id           String     @id @default(uuid())
  title        String
  slug         String     @unique
  content      String
  status       PostStatus @default(DRAFT)
  authorId     String
  githubRepo   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  comments     Int        @default(0)
  likes        Int        @default(0)
  shares       Int        @default(0)
  views        Int        @default(0)
  comments_rel Comment[]  @relation("PostComments")
  media        Media[]    @relation("PostMedia")
  author       User       @relation("UserPosts", fields: [authorId], references: [id])
  tags         PostTag[]
  reactions    Reaction[]

  @@index([status])
  @@index([authorId])
  @@index([createdAt])
  @@index([slug])
}

model Comment {
  id              String    @id @default(uuid())
  postId          String
  userId          String?
  content         String
  parentCommentId String?
  isApproved      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  parent          Comment?  @relation("CommentToReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentToReplies")
  post            Post      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user            User?     @relation("UserComments", fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

model Reaction {
  id        String       @id @default(uuid())
  userId    String
  postId    String?
  type      ReactionType
  createdAt DateTime     @default(now())
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // "mention", "reply", "like", etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json?    // Additional data like postId, commentId, etc.
  createdAt DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model Media {
  id         String    @id @default(uuid())
  url        String
  type       MediaType
  uploadedBy String?
  uploadedAt DateTime  @default(now())
  postId     String?
  mediaId    String?
  post       Post?     @relation("PostMedia", fields: [postId], references: [id])
  user       User?     @relation("UserMedia", fields: [uploadedBy], references: [id])

  @@index([type])
  @@index([uploadedBy])
  @@index([uploadedAt])
}

model VideoSection {
  id           String   @id @default(uuid())
  videoId      String
  channelName   String
  videoUrl     String
  title        String
  thumbnailUrl String
  isFeatured   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  posts     PostTag[]

  @@index([name])
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}







enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RoleName {
  ADMIN
  USER
}

enum ReactionType {
  LIKE
  HEART
  HAHA
  SAD
  ANGRY
  SHARE
  WOW
}

enum MediaType {
  IMAGE
  YOUTUBE
  VIDEO
}






